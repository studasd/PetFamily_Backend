// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PetFamily.Volunteers.Infrastructure.DbContexts;

#nullable disable

namespace PetFamily.Volunteers.Infrastructure.Migrations
{
    [DbContext(typeof(VolunteerWriteDbContext))]
    [Migration("20250806224616_Volunteer_Init")]
    partial class Volunteer_Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PetFamily.Volunteers.Domain.Entities.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("color");

                    b.Property<DateOnly>("DateBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_birth");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateDeletion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deletion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)")
                        .HasColumnName("description");

                    b.Property<string>("HealthInfo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("health_info");

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric")
                        .HasColumnName("height");

                    b.Property<string>("HelpStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pet_status");

                    b.Property<bool?>("IsNeutered")
                        .HasColumnType("boolean")
                        .HasColumnName("is_neutered");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_soft_deleted");

                    b.Property<bool?>("IsVaccinated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vaccinated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.Property<Guid>("volunteer_id")
                        .HasColumnType("uuid")
                        .HasColumnName("volunteer_id");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "PetFamily.Volunteers.Domain.Entities.Pet.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Apartment")
                                .HasColumnType("integer")
                                .HasColumnName("addr_apartment");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("addr_city");

                            b1.Property<string>("Country")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("addr_country");

                            b1.Property<string>("HouseLiter")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("addr_house_liter");

                            b1.Property<int>("HouseNumber")
                                .HasColumnType("integer")
                                .HasColumnName("addr_house_number");

                            b1.Property<string>("Street")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("addr_street");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("BankingDetails", "PetFamily.Volunteers.Domain.Entities.Pet.BankingDetails#BankingDetails", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Description")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("bank_description");

                            b1.Property<string>("Name")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("bank_name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PetType", "PetFamily.Volunteers.Domain.Entities.Pet.PetType#PetType", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid>("BreedId")
                                .HasColumnType("uuid")
                                .HasColumnName("breed_id");

                            b1.Property<Guid>("SpeciesId")
                                .HasColumnType("uuid")
                                .HasColumnName("species_id");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Position", "PetFamily.Volunteers.Domain.Entities.Pet.Position#Position", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("position");
                        });

                    b.HasKey("Id")
                        .HasName("pk_pets");

                    b.HasIndex("volunteer_id")
                        .HasDatabaseName("ix_pets_volunteer_id");

                    b.ToTable("pets", (string)null);
                });

            modelBuilder.Entity("PetFamily.Volunteers.Domain.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateDeletion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deletion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("integer")
                        .HasColumnName("experience_years");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_soft_deleted");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "PetFamily.Volunteers.Domain.Entities.Volunteer.Name#VolunteerName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Firstname")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("first_name");

                            b1.Property<string>("Lastname")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("last_name");

                            b1.Property<string>("Surname")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("sur_name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Phone", "PetFamily.Volunteers.Domain.Entities.Volunteer.Phone#Phone", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("phone");
                        });

                    b.HasKey("Id")
                        .HasName("pk_volunteers");

                    b.ToTable("volunteers", (string)null);
                });

            modelBuilder.Entity("PetFamily.Volunteers.Domain.Entities.Pet", b =>
                {
                    b.HasOne("PetFamily.Volunteers.Domain.Entities.Volunteer", null)
                        .WithMany("Pets")
                        .HasForeignKey("volunteer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pets_volunteers_volunteer_id");

                    b.OwnsMany("PetFamily.SharedKernel.ValueObjects.FileStorage", "FileStorages", b1 =>
                        {
                            b1.Property<Guid>("PetId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<bool>("IsPrime")
                                .HasColumnType("boolean")
                                .HasColumnName("is_prime");

                            b1.Property<string>("PathToStorage")
                                .IsRequired()
                                .HasMaxLength(1500)
                                .HasColumnType("character varying(1500)")
                                .HasColumnName("files");

                            b1.HasKey("PetId", "Id")
                                .HasName("pk_pets");

                            b1.ToTable("pets");

                            b1.ToJson("file_storages");

                            b1.WithOwner()
                                .HasForeignKey("PetId")
                                .HasConstraintName("fk_pets_pets_pet_id");
                        });

                    b.OwnsMany("PetFamily.SharedKernel.ValueObjects.Phone", "Phones", b1 =>
                        {
                            b1.Property<Guid>("PetId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("phones");

                            b1.HasKey("PetId", "Id")
                                .HasName("pk_pets");

                            b1.ToTable("pets");

                            b1.ToJson("phones");

                            b1.WithOwner()
                                .HasForeignKey("PetId")
                                .HasConstraintName("fk_pets_pets_pet_id");
                        });

                    b.Navigation("FileStorages");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("PetFamily.Volunteers.Domain.Entities.Volunteer", b =>
                {
                    b.OwnsMany("PetFamily.SharedKernel.ValueObjects.BankingDetails", "BankingDetails", b1 =>
                        {
                            b1.Property<Guid>("VolunteerId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Description")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("bank_description");

                            b1.Property<string>("Name")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("bank_name");

                            b1.HasKey("VolunteerId", "Id")
                                .HasName("pk_volunteers");

                            b1.ToTable("volunteers");

                            b1.ToJson("banking_details");

                            b1.WithOwner()
                                .HasForeignKey("VolunteerId")
                                .HasConstraintName("fk_volunteers_volunteers_volunteer_id");
                        });

                    b.OwnsMany("PetFamily.SharedKernel.ValueObjects.SocialNetwork", "SocialNetworks", b1 =>
                        {
                            b1.Property<Guid>("VolunteerId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Link")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("VolunteerId", "Id")
                                .HasName("pk_volunteers");

                            b1.ToTable("volunteers");

                            b1.ToJson("social_networks");

                            b1.WithOwner()
                                .HasForeignKey("VolunteerId")
                                .HasConstraintName("fk_volunteers_volunteers_volunteer_id");
                        });

                    b.Navigation("BankingDetails");

                    b.Navigation("SocialNetworks");
                });

            modelBuilder.Entity("PetFamily.Volunteers.Domain.Entities.Volunteer", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
